// Code generated by protoc-gen-go. DO NOT EDIT.
// source: event.proto

/*
Package event is a generated protocol buffer package.

It is generated from these files:
	event.proto

It has these top-level messages:
	EventDetail
	Organizer
	Tax
	Ticket
	Schedule
	Speaker
	Exhibitor
	Sponsor
	Partner
	MobileApp
	Event
	Coordinates
	Response
	RollbackRequest
	RollbackReponse
	EventItem
	ManageEventResponse
	EventRequest
	UpdateRequest
	UpdateResponse
	AnyResponse
	UpdateFeaturedRequest
*/
package event

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventDetail struct {
	Id                          string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name                        string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	BriefDescription            string   `protobuf:"bytes,3,opt,name=brief_description,json=briefDescription" json:"brief_description,omitempty"`
	StartDate                   string   `protobuf:"bytes,4,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	StartTime                   string   `protobuf:"bytes,5,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndDate                     string   `protobuf:"bytes,6,opt,name=end_date,json=endDate" json:"end_date,omitempty"`
	EndTime                     string   `protobuf:"bytes,7,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	VenueName                   string   `protobuf:"bytes,8,opt,name=venue_name,json=venueName" json:"venue_name,omitempty"`
	Address                     string   `protobuf:"bytes,9,opt,name=address" json:"address,omitempty"`
	Address_2                   string   `protobuf:"bytes,10,opt,name=address_2,json=address2" json:"address_2,omitempty"`
	VenueCity                   string   `protobuf:"bytes,11,opt,name=venue_city,json=venueCity" json:"venue_city,omitempty"`
	VenueCountry                string   `protobuf:"bytes,12,opt,name=venue_country,json=venueCountry" json:"venue_country,omitempty"`
	VenueState                  string   `protobuf:"bytes,13,opt,name=venue_state,json=venueState" json:"venue_state,omitempty"`
	CoverImageUploadId          string   `protobuf:"bytes,15,opt,name=cover_image_upload_id,json=coverImageUploadId" json:"cover_image_upload_id,omitempty"`
	Title                       string   `protobuf:"bytes,16,opt,name=title" json:"title,omitempty"`
	DetailedDescription         string   `protobuf:"bytes,17,opt,name=detailed_description,json=detailedDescription" json:"detailed_description,omitempty"`
	EventTags                   string   `protobuf:"bytes,19,opt,name=event_tags,json=eventTags" json:"event_tags,omitempty"`
	MysqlId                     string   `protobuf:"bytes,20,opt,name=mysql_id,json=mysqlId" json:"mysql_id,omitempty"`
	UserId                      string   `protobuf:"bytes,21,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	StartTimestamp              string   `protobuf:"bytes,22,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	EndTimestamp                string   `protobuf:"bytes,23,opt,name=end_timestamp,json=endTimestamp" json:"end_timestamp,omitempty"`
	Timezone                    string   `protobuf:"bytes,24,opt,name=timezone" json:"timezone,omitempty"`
	Zone                        string   `protobuf:"bytes,25,opt,name=zone" json:"zone,omitempty"`
	IsFeatured                  bool     `protobuf:"varint,26,opt,name=is_featured,json=isFeatured" json:"is_featured,omitempty"`
	CreatedOn                   string   `protobuf:"bytes,27,opt,name=created_on,json=createdOn" json:"created_on,omitempty"`
	Keywords                    []string `protobuf:"bytes,28,rep,name=keywords" json:"keywords,omitempty"`
	AllowSponsorEnquires        string   `protobuf:"bytes,29,opt,name=allow_sponsor_enquires,json=allowSponsorEnquires" json:"allow_sponsor_enquires,omitempty"`
	AllowExhibitorEnquires      string   `protobuf:"bytes,30,opt,name=allow_exhibitor_enquires,json=allowExhibitorEnquires" json:"allow_exhibitor_enquires,omitempty"`
	AllowBrochureEnquires       string   `protobuf:"bytes,31,opt,name=allow_brochure_enquires,json=allowBrochureEnquires" json:"allow_brochure_enquires,omitempty"`
	CoverImageThumbnailUploadId string   `protobuf:"bytes,32,opt,name=cover_image_thumbnail_upload_id,json=coverImageThumbnailUploadId" json:"cover_image_thumbnail_upload_id,omitempty"`
	FloorPlanUploadId           string   `protobuf:"bytes,33,opt,name=floor_plan_upload_id,json=floorPlanUploadId" json:"floor_plan_upload_id,omitempty"`
	EventVideo                  string   `protobuf:"bytes,34,opt,name=event_video,json=eventVideo" json:"event_video,omitempty"`
	VenueRegion                 string   `protobuf:"bytes,35,opt,name=venue_region,json=venueRegion" json:"venue_region,omitempty"`
	EtCommissionRate            float64  `protobuf:"fixed64,36,opt,name=et_commission_rate,json=etCommissionRate" json:"et_commission_rate,omitempty"`
}

func (m *EventDetail) Reset()                    { *m = EventDetail{} }
func (m *EventDetail) String() string            { return proto.CompactTextString(m) }
func (*EventDetail) ProtoMessage()               {}
func (*EventDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EventDetail) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EventDetail) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventDetail) GetBriefDescription() string {
	if m != nil {
		return m.BriefDescription
	}
	return ""
}

func (m *EventDetail) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *EventDetail) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *EventDetail) GetEndDate() string {
	if m != nil {
		return m.EndDate
	}
	return ""
}

func (m *EventDetail) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *EventDetail) GetVenueName() string {
	if m != nil {
		return m.VenueName
	}
	return ""
}

func (m *EventDetail) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventDetail) GetAddress_2() string {
	if m != nil {
		return m.Address_2
	}
	return ""
}

func (m *EventDetail) GetVenueCity() string {
	if m != nil {
		return m.VenueCity
	}
	return ""
}

func (m *EventDetail) GetVenueCountry() string {
	if m != nil {
		return m.VenueCountry
	}
	return ""
}

func (m *EventDetail) GetVenueState() string {
	if m != nil {
		return m.VenueState
	}
	return ""
}

func (m *EventDetail) GetCoverImageUploadId() string {
	if m != nil {
		return m.CoverImageUploadId
	}
	return ""
}

func (m *EventDetail) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *EventDetail) GetDetailedDescription() string {
	if m != nil {
		return m.DetailedDescription
	}
	return ""
}

func (m *EventDetail) GetEventTags() string {
	if m != nil {
		return m.EventTags
	}
	return ""
}

func (m *EventDetail) GetMysqlId() string {
	if m != nil {
		return m.MysqlId
	}
	return ""
}

func (m *EventDetail) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *EventDetail) GetStartTimestamp() string {
	if m != nil {
		return m.StartTimestamp
	}
	return ""
}

func (m *EventDetail) GetEndTimestamp() string {
	if m != nil {
		return m.EndTimestamp
	}
	return ""
}

func (m *EventDetail) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *EventDetail) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *EventDetail) GetIsFeatured() bool {
	if m != nil {
		return m.IsFeatured
	}
	return false
}

func (m *EventDetail) GetCreatedOn() string {
	if m != nil {
		return m.CreatedOn
	}
	return ""
}

func (m *EventDetail) GetKeywords() []string {
	if m != nil {
		return m.Keywords
	}
	return nil
}

func (m *EventDetail) GetAllowSponsorEnquires() string {
	if m != nil {
		return m.AllowSponsorEnquires
	}
	return ""
}

func (m *EventDetail) GetAllowExhibitorEnquires() string {
	if m != nil {
		return m.AllowExhibitorEnquires
	}
	return ""
}

func (m *EventDetail) GetAllowBrochureEnquires() string {
	if m != nil {
		return m.AllowBrochureEnquires
	}
	return ""
}

func (m *EventDetail) GetCoverImageThumbnailUploadId() string {
	if m != nil {
		return m.CoverImageThumbnailUploadId
	}
	return ""
}

func (m *EventDetail) GetFloorPlanUploadId() string {
	if m != nil {
		return m.FloorPlanUploadId
	}
	return ""
}

func (m *EventDetail) GetEventVideo() string {
	if m != nil {
		return m.EventVideo
	}
	return ""
}

func (m *EventDetail) GetVenueRegion() string {
	if m != nil {
		return m.VenueRegion
	}
	return ""
}

func (m *EventDetail) GetEtCommissionRate() float64 {
	if m != nil {
		return m.EtCommissionRate
	}
	return 0
}

type Organizer struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Website     string `protobuf:"bytes,3,opt,name=website" json:"website,omitempty"`
	Id          string `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
	Status      string `protobuf:"bytes,5,opt,name=status" json:"status,omitempty"`
	UploadId    string `protobuf:"bytes,6,opt,name=upload_id,json=uploadId" json:"upload_id,omitempty"`
}

func (m *Organizer) Reset()                    { *m = Organizer{} }
func (m *Organizer) String() string            { return proto.CompactTextString(m) }
func (*Organizer) ProtoMessage()               {}
func (*Organizer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Organizer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Organizer) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Organizer) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *Organizer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Organizer) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Organizer) GetUploadId() string {
	if m != nil {
		return m.UploadId
	}
	return ""
}

type Tax struct {
	TaxName      string `protobuf:"bytes,1,opt,name=tax_name,json=taxName" json:"tax_name,omitempty"`
	TaxRate      string `protobuf:"bytes,2,opt,name=tax_rate,json=taxRate" json:"tax_rate,omitempty"`
	TaxId        string `protobuf:"bytes,3,opt,name=tax_id,json=taxId" json:"tax_id,omitempty"`
	CountryName  string `protobuf:"bytes,4,opt,name=country_name,json=countryName" json:"country_name,omitempty"`
	ShouldAddTax string `protobuf:"bytes,5,opt,name=should_add_tax,json=shouldAddTax" json:"should_add_tax,omitempty"`
	IncludeTax   bool   `protobuf:"varint,6,opt,name=include_tax,json=includeTax" json:"include_tax,omitempty"`
}

func (m *Tax) Reset()                    { *m = Tax{} }
func (m *Tax) String() string            { return proto.CompactTextString(m) }
func (*Tax) ProtoMessage()               {}
func (*Tax) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Tax) GetTaxName() string {
	if m != nil {
		return m.TaxName
	}
	return ""
}

func (m *Tax) GetTaxRate() string {
	if m != nil {
		return m.TaxRate
	}
	return ""
}

func (m *Tax) GetTaxId() string {
	if m != nil {
		return m.TaxId
	}
	return ""
}

func (m *Tax) GetCountryName() string {
	if m != nil {
		return m.CountryName
	}
	return ""
}

func (m *Tax) GetShouldAddTax() string {
	if m != nil {
		return m.ShouldAddTax
	}
	return ""
}

func (m *Tax) GetIncludeTax() bool {
	if m != nil {
		return m.IncludeTax
	}
	return false
}

type Ticket struct {
	Name                      string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Quantity                  int32   `protobuf:"varint,2,opt,name=quantity" json:"quantity,omitempty"`
	Price                     float64 `protobuf:"fixed64,3,opt,name=price" json:"price,omitempty"`
	Currency                  string  `protobuf:"bytes,4,opt,name=currency" json:"currency,omitempty"`
	StartDate                 string  `protobuf:"bytes,5,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	StartTime                 string  `protobuf:"bytes,6,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndDate                   string  `protobuf:"bytes,7,opt,name=end_date,json=endDate" json:"end_date,omitempty"`
	EndTime                   string  `protobuf:"bytes,8,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	AllowVisitorRegistrations string  `protobuf:"bytes,9,opt,name=allow_visitor_registrations,json=allowVisitorRegistrations" json:"allow_visitor_registrations,omitempty"`
	Sold                      int32   `protobuf:"varint,10,opt,name=sold" json:"sold,omitempty"`
	StartTimestamp            string  `protobuf:"bytes,11,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	EndTimestamp              string  `protobuf:"bytes,12,opt,name=end_timestamp,json=endTimestamp" json:"end_timestamp,omitempty"`
	Timezone                  string  `protobuf:"bytes,13,opt,name=timezone" json:"timezone,omitempty"`
	Zone                      string  `protobuf:"bytes,14,opt,name=zone" json:"zone,omitempty"`
}

func (m *Ticket) Reset()                    { *m = Ticket{} }
func (m *Ticket) String() string            { return proto.CompactTextString(m) }
func (*Ticket) ProtoMessage()               {}
func (*Ticket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Ticket) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Ticket) GetQuantity() int32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *Ticket) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Ticket) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Ticket) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *Ticket) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *Ticket) GetEndDate() string {
	if m != nil {
		return m.EndDate
	}
	return ""
}

func (m *Ticket) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *Ticket) GetAllowVisitorRegistrations() string {
	if m != nil {
		return m.AllowVisitorRegistrations
	}
	return ""
}

func (m *Ticket) GetSold() int32 {
	if m != nil {
		return m.Sold
	}
	return 0
}

func (m *Ticket) GetStartTimestamp() string {
	if m != nil {
		return m.StartTimestamp
	}
	return ""
}

func (m *Ticket) GetEndTimestamp() string {
	if m != nil {
		return m.EndTimestamp
	}
	return ""
}

func (m *Ticket) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *Ticket) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

type Schedule struct {
	Id            string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title         string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Description   string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	StartEndDate  string `protobuf:"bytes,4,opt,name=startEndDate" json:"startEndDate,omitempty"`
	Speaker       string `protobuf:"bytes,5,opt,name=speaker" json:"speaker,omitempty"`
	Venue         string `protobuf:"bytes,6,opt,name=venue" json:"venue,omitempty"`
	ScheduleTitle string `protobuf:"bytes,7,opt,name=scheduleTitle" json:"scheduleTitle,omitempty"`
}

func (m *Schedule) Reset()                    { *m = Schedule{} }
func (m *Schedule) String() string            { return proto.CompactTextString(m) }
func (*Schedule) ProtoMessage()               {}
func (*Schedule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Schedule) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Schedule) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Schedule) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Schedule) GetStartEndDate() string {
	if m != nil {
		return m.StartEndDate
	}
	return ""
}

func (m *Schedule) GetSpeaker() string {
	if m != nil {
		return m.Speaker
	}
	return ""
}

func (m *Schedule) GetVenue() string {
	if m != nil {
		return m.Venue
	}
	return ""
}

func (m *Schedule) GetScheduleTitle() string {
	if m != nil {
		return m.ScheduleTitle
	}
	return ""
}

type Speaker struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	FirstName   string `protobuf:"bytes,2,opt,name=firstName" json:"firstName,omitempty"`
	LastName    string `protobuf:"bytes,3,opt,name=lastName" json:"lastName,omitempty"`
	Position    string `protobuf:"bytes,4,opt,name=position" json:"position,omitempty"`
	Company     string `protobuf:"bytes,5,opt,name=company" json:"company,omitempty"`
	Description string `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	UploadId    string `protobuf:"bytes,7,opt,name=upload_id,json=uploadId" json:"upload_id,omitempty"`
}

func (m *Speaker) Reset()                    { *m = Speaker{} }
func (m *Speaker) String() string            { return proto.CompactTextString(m) }
func (*Speaker) ProtoMessage()               {}
func (*Speaker) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Speaker) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Speaker) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Speaker) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Speaker) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *Speaker) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *Speaker) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Speaker) GetUploadId() string {
	if m != nil {
		return m.UploadId
	}
	return ""
}

type Exhibitor struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Company     string `protobuf:"bytes,2,opt,name=company" json:"company,omitempty"`
	BoothNumber string `protobuf:"bytes,3,opt,name=boothNumber" json:"boothNumber,omitempty"`
	Website     string `protobuf:"bytes,4,opt,name=website" json:"website,omitempty"`
	Category    string `protobuf:"bytes,5,opt,name=category" json:"category,omitempty"`
	Description string `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	UploadId    string `protobuf:"bytes,7,opt,name=upload_id,json=uploadId" json:"upload_id,omitempty"`
}

func (m *Exhibitor) Reset()                    { *m = Exhibitor{} }
func (m *Exhibitor) String() string            { return proto.CompactTextString(m) }
func (*Exhibitor) ProtoMessage()               {}
func (*Exhibitor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Exhibitor) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Exhibitor) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *Exhibitor) GetBoothNumber() string {
	if m != nil {
		return m.BoothNumber
	}
	return ""
}

func (m *Exhibitor) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *Exhibitor) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Exhibitor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Exhibitor) GetUploadId() string {
	if m != nil {
		return m.UploadId
	}
	return ""
}

type Sponsor struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Company  string `protobuf:"bytes,2,opt,name=company" json:"company,omitempty"`
	Website  string `protobuf:"bytes,3,opt,name=website" json:"website,omitempty"`
	Email    string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	UploadId string `protobuf:"bytes,5,opt,name=upload_id,json=uploadId" json:"upload_id,omitempty"`
}

func (m *Sponsor) Reset()                    { *m = Sponsor{} }
func (m *Sponsor) String() string            { return proto.CompactTextString(m) }
func (*Sponsor) ProtoMessage()               {}
func (*Sponsor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Sponsor) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Sponsor) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *Sponsor) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *Sponsor) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Sponsor) GetUploadId() string {
	if m != nil {
		return m.UploadId
	}
	return ""
}

type Partner struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Company  string `protobuf:"bytes,2,opt,name=company" json:"company,omitempty"`
	Email    string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Website  string `protobuf:"bytes,4,opt,name=website" json:"website,omitempty"`
	UploadId string `protobuf:"bytes,6,opt,name=upload_id,json=uploadId" json:"upload_id,omitempty"`
}

func (m *Partner) Reset()                    { *m = Partner{} }
func (m *Partner) String() string            { return proto.CompactTextString(m) }
func (*Partner) ProtoMessage()               {}
func (*Partner) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Partner) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Partner) GetCompany() string {
	if m != nil {
		return m.Company
	}
	return ""
}

func (m *Partner) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Partner) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *Partner) GetUploadId() string {
	if m != nil {
		return m.UploadId
	}
	return ""
}

type MobileApp struct {
	Amenities string `protobuf:"bytes,1,opt,name=amenities" json:"amenities,omitempty"`
	Help      string `protobuf:"bytes,2,opt,name=help" json:"help,omitempty"`
}

func (m *MobileApp) Reset()                    { *m = MobileApp{} }
func (m *MobileApp) String() string            { return proto.CompactTextString(m) }
func (*MobileApp) ProtoMessage()               {}
func (*MobileApp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MobileApp) GetAmenities() string {
	if m != nil {
		return m.Amenities
	}
	return ""
}

func (m *MobileApp) GetHelp() string {
	if m != nil {
		return m.Help
	}
	return ""
}

type Event struct {
	EventDetail  *EventDetail `protobuf:"bytes,1,opt,name=eventDetail" json:"eventDetail,omitempty"`
	Organizer    *Organizer   `protobuf:"bytes,2,opt,name=organizer" json:"organizer,omitempty"`
	Tax          *Tax         `protobuf:"bytes,3,opt,name=tax" json:"tax,omitempty"`
	Ticket       *Ticket      `protobuf:"bytes,4,opt,name=ticket" json:"ticket,omitempty"`
	Speakers     []*Speaker   `protobuf:"bytes,5,rep,name=speakers" json:"speakers,omitempty"`
	Exhibitors   []*Exhibitor `protobuf:"bytes,6,rep,name=exhibitors" json:"exhibitors,omitempty"`
	Sponsors     []*Sponsor   `protobuf:"bytes,7,rep,name=sponsors" json:"sponsors,omitempty"`
	Partners     []*Partner   `protobuf:"bytes,8,rep,name=partners" json:"partners,omitempty"`
	Schedule     []*Schedule  `protobuf:"bytes,9,rep,name=schedule" json:"schedule,omitempty"`
	Categories   []string     `protobuf:"bytes,10,rep,name=categories" json:"categories,omitempty"`
	Interests    []string     `protobuf:"bytes,11,rep,name=interests" json:"interests,omitempty"`
	Attendees    []string     `protobuf:"bytes,12,rep,name=attendees" json:"attendees,omitempty"`
	EventTypes   []string     `protobuf:"bytes,13,rep,name=eventTypes" json:"eventTypes,omitempty"`
	Status       string       `protobuf:"bytes,14,opt,name=status" json:"status,omitempty"`
	IsInWishlist string       `protobuf:"bytes,15,opt,name=is_in_wishlist,json=isInWishlist" json:"is_in_wishlist,omitempty"`
	Coordinates  *Coordinates `protobuf:"bytes,16,opt,name=coordinates" json:"coordinates,omitempty"`
	MobileApp    *MobileApp   `protobuf:"bytes,17,opt,name=mobileApp" json:"mobileApp,omitempty"`
	IsFeatured   string       `protobuf:"bytes,18,opt,name=is_featured,json=isFeatured" json:"is_featured,omitempty"`
	Deactivated  bool         `protobuf:"varint,19,opt,name=deactivated" json:"deactivated,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Event) GetEventDetail() *EventDetail {
	if m != nil {
		return m.EventDetail
	}
	return nil
}

func (m *Event) GetOrganizer() *Organizer {
	if m != nil {
		return m.Organizer
	}
	return nil
}

func (m *Event) GetTax() *Tax {
	if m != nil {
		return m.Tax
	}
	return nil
}

func (m *Event) GetTicket() *Ticket {
	if m != nil {
		return m.Ticket
	}
	return nil
}

func (m *Event) GetSpeakers() []*Speaker {
	if m != nil {
		return m.Speakers
	}
	return nil
}

func (m *Event) GetExhibitors() []*Exhibitor {
	if m != nil {
		return m.Exhibitors
	}
	return nil
}

func (m *Event) GetSponsors() []*Sponsor {
	if m != nil {
		return m.Sponsors
	}
	return nil
}

func (m *Event) GetPartners() []*Partner {
	if m != nil {
		return m.Partners
	}
	return nil
}

func (m *Event) GetSchedule() []*Schedule {
	if m != nil {
		return m.Schedule
	}
	return nil
}

func (m *Event) GetCategories() []string {
	if m != nil {
		return m.Categories
	}
	return nil
}

func (m *Event) GetInterests() []string {
	if m != nil {
		return m.Interests
	}
	return nil
}

func (m *Event) GetAttendees() []string {
	if m != nil {
		return m.Attendees
	}
	return nil
}

func (m *Event) GetEventTypes() []string {
	if m != nil {
		return m.EventTypes
	}
	return nil
}

func (m *Event) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Event) GetIsInWishlist() string {
	if m != nil {
		return m.IsInWishlist
	}
	return ""
}

func (m *Event) GetCoordinates() *Coordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *Event) GetMobileApp() *MobileApp {
	if m != nil {
		return m.MobileApp
	}
	return nil
}

func (m *Event) GetIsFeatured() string {
	if m != nil {
		return m.IsFeatured
	}
	return ""
}

func (m *Event) GetDeactivated() bool {
	if m != nil {
		return m.Deactivated
	}
	return false
}

type Coordinates struct {
	Lat float64 `protobuf:"fixed64,1,opt,name=lat" json:"lat,omitempty"`
	Lon float64 `protobuf:"fixed64,2,opt,name=lon" json:"lon,omitempty"`
}

func (m *Coordinates) Reset()                    { *m = Coordinates{} }
func (m *Coordinates) String() string            { return proto.CompactTextString(m) }
func (*Coordinates) ProtoMessage()               {}
func (*Coordinates) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Coordinates) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Coordinates) GetLon() float64 {
	if m != nil {
		return m.Lon
	}
	return 0
}

type Response struct {
	Status    string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	ArangoID  string `protobuf:"bytes,2,opt,name=arangoID" json:"arangoID,omitempty"`
	ElasticId string `protobuf:"bytes,3,opt,name=elasticId" json:"elasticId,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Response) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Response) GetArangoID() string {
	if m != nil {
		return m.ArangoID
	}
	return ""
}

func (m *Response) GetElasticId() string {
	if m != nil {
		return m.ElasticId
	}
	return ""
}

type RollbackRequest struct {
	ArangoId  string `protobuf:"bytes,1,opt,name=arangoId" json:"arangoId,omitempty"`
	ElasticId string `protobuf:"bytes,2,opt,name=elasticId" json:"elasticId,omitempty"`
}

func (m *RollbackRequest) Reset()                    { *m = RollbackRequest{} }
func (m *RollbackRequest) String() string            { return proto.CompactTextString(m) }
func (*RollbackRequest) ProtoMessage()               {}
func (*RollbackRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *RollbackRequest) GetArangoId() string {
	if m != nil {
		return m.ArangoId
	}
	return ""
}

func (m *RollbackRequest) GetElasticId() string {
	if m != nil {
		return m.ElasticId
	}
	return ""
}

type RollbackReponse struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *RollbackReponse) Reset()                    { *m = RollbackReponse{} }
func (m *RollbackReponse) String() string            { return proto.CompactTextString(m) }
func (*RollbackReponse) ProtoMessage()               {}
func (*RollbackReponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *RollbackReponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type EventItem struct {
	Id                  string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name                string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	StartDate           string  `protobuf:"bytes,3,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	StartTime           string  `protobuf:"bytes,4,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndDate             string  `protobuf:"bytes,5,opt,name=end_date,json=endDate" json:"end_date,omitempty"`
	VenueName           string  `protobuf:"bytes,6,opt,name=venue_name,json=venueName" json:"venue_name,omitempty"`
	VenueCity           string  `protobuf:"bytes,7,opt,name=venue_city,json=venueCity" json:"venue_city,omitempty"`
	VenueCountry        string  `protobuf:"bytes,8,opt,name=venue_country,json=venueCountry" json:"venue_country,omitempty"`
	Currency            string  `protobuf:"bytes,9,opt,name=currency" json:"currency,omitempty"`
	Price               float64 `protobuf:"fixed64,10,opt,name=price" json:"price,omitempty"`
	VisitorRegistration string  `protobuf:"bytes,11,opt,name=visitor_registration,json=visitorRegistration" json:"visitor_registration,omitempty"`
	CoverImageUploadId  string  `protobuf:"bytes,12,opt,name=cover_image_upload_id,json=coverImageUploadId" json:"cover_image_upload_id,omitempty"`
	Status              string  `protobuf:"bytes,13,opt,name=status" json:"status,omitempty"`
	Zone                string  `protobuf:"bytes,14,opt,name=zone" json:"zone,omitempty"`
	Timezone            string  `protobuf:"bytes,15,opt,name=timezone" json:"timezone,omitempty"`
	EndTime             string  `protobuf:"bytes,16,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	Tickets             int32   `protobuf:"varint,17,opt,name=tickets" json:"tickets,omitempty"`
	Sold                int32   `protobuf:"varint,18,opt,name=sold" json:"sold,omitempty"`
	Key                 string  `protobuf:"bytes,19,opt,name=key" json:"key,omitempty"`
	OrganizerId         string  `protobuf:"bytes,20,opt,name=organizer_id,json=organizerId" json:"organizer_id,omitempty"`
	OrganizerName       string  `protobuf:"bytes,21,opt,name=organizer_name,json=organizerName" json:"organizer_name,omitempty"`
	OrganizerStatus     string  `protobuf:"bytes,22,opt,name=organizer_status,json=organizerStatus" json:"organizer_status,omitempty"`
	Deactivated         bool    `protobuf:"varint,23,opt,name=deactivated" json:"deactivated,omitempty"`
}

func (m *EventItem) Reset()                    { *m = EventItem{} }
func (m *EventItem) String() string            { return proto.CompactTextString(m) }
func (*EventItem) ProtoMessage()               {}
func (*EventItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *EventItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EventItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventItem) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *EventItem) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *EventItem) GetEndDate() string {
	if m != nil {
		return m.EndDate
	}
	return ""
}

func (m *EventItem) GetVenueName() string {
	if m != nil {
		return m.VenueName
	}
	return ""
}

func (m *EventItem) GetVenueCity() string {
	if m != nil {
		return m.VenueCity
	}
	return ""
}

func (m *EventItem) GetVenueCountry() string {
	if m != nil {
		return m.VenueCountry
	}
	return ""
}

func (m *EventItem) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *EventItem) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *EventItem) GetVisitorRegistration() string {
	if m != nil {
		return m.VisitorRegistration
	}
	return ""
}

func (m *EventItem) GetCoverImageUploadId() string {
	if m != nil {
		return m.CoverImageUploadId
	}
	return ""
}

func (m *EventItem) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *EventItem) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *EventItem) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *EventItem) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *EventItem) GetTickets() int32 {
	if m != nil {
		return m.Tickets
	}
	return 0
}

func (m *EventItem) GetSold() int32 {
	if m != nil {
		return m.Sold
	}
	return 0
}

func (m *EventItem) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *EventItem) GetOrganizerId() string {
	if m != nil {
		return m.OrganizerId
	}
	return ""
}

func (m *EventItem) GetOrganizerName() string {
	if m != nil {
		return m.OrganizerName
	}
	return ""
}

func (m *EventItem) GetOrganizerStatus() string {
	if m != nil {
		return m.OrganizerStatus
	}
	return ""
}

func (m *EventItem) GetDeactivated() bool {
	if m != nil {
		return m.Deactivated
	}
	return false
}

type ManageEventResponse struct {
	Name                      string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	StartDate                 string  `protobuf:"bytes,2,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	StartTime                 string  `protobuf:"bytes,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	Price                     float64 `protobuf:"fixed64,4,opt,name=price" json:"price,omitempty"`
	Sold                      int32   `protobuf:"varint,5,opt,name=sold" json:"sold,omitempty"`
	Quantity                  int32   `protobuf:"varint,6,opt,name=quantity" json:"quantity,omitempty"`
	VenueName                 string  `protobuf:"bytes,7,opt,name=venue_name,json=venueName" json:"venue_name,omitempty"`
	VenueCity                 string  `protobuf:"bytes,8,opt,name=venue_city,json=venueCity" json:"venue_city,omitempty"`
	CoverImageUploadId        string  `protobuf:"bytes,9,opt,name=cover_image_upload_id,json=coverImageUploadId" json:"cover_image_upload_id,omitempty"`
	Currency                  string  `protobuf:"bytes,10,opt,name=currency" json:"currency,omitempty"`
	AllowVisitorRegistrations string  `protobuf:"bytes,11,opt,name=allow_visitor_registrations,json=allowVisitorRegistrations" json:"allow_visitor_registrations,omitempty"`
	Status                    string  `protobuf:"bytes,12,opt,name=status" json:"status,omitempty"`
	Visitors                  int32   `protobuf:"varint,13,opt,name=visitors" json:"visitors,omitempty"`
	TicketStartTime           string  `protobuf:"bytes,14,opt,name=ticket_start_time,json=ticketStartTime" json:"ticket_start_time,omitempty"`
	TicketStartDate           string  `protobuf:"bytes,15,opt,name=ticket_start_date,json=ticketStartDate" json:"ticket_start_date,omitempty"`
	TicketEndTime             string  `protobuf:"bytes,16,opt,name=ticket_end_time,json=ticketEndTime" json:"ticket_end_time,omitempty"`
	TicketEndDate             string  `protobuf:"bytes,17,opt,name=ticket_end_date,json=ticketEndDate" json:"ticket_end_date,omitempty"`
	TimeZone                  string  `protobuf:"bytes,18,opt,name=time_zone,json=timeZone" json:"time_zone,omitempty"`
	EventStatus               string  `protobuf:"bytes,19,opt,name=event_status,json=eventStatus" json:"event_status,omitempty"`
	PageViews                 int64   `protobuf:"varint,20,opt,name=page_views,json=pageViews" json:"page_views,omitempty"`
	EndTime                   string  `protobuf:"bytes,21,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	EndDate                   string  `protobuf:"bytes,22,opt,name=end_date,json=endDate" json:"end_date,omitempty"`
	Deactivated               bool    `protobuf:"varint,23,opt,name=deactivated" json:"deactivated,omitempty"`
}

func (m *ManageEventResponse) Reset()                    { *m = ManageEventResponse{} }
func (m *ManageEventResponse) String() string            { return proto.CompactTextString(m) }
func (*ManageEventResponse) ProtoMessage()               {}
func (*ManageEventResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ManageEventResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ManageEventResponse) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *ManageEventResponse) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *ManageEventResponse) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *ManageEventResponse) GetSold() int32 {
	if m != nil {
		return m.Sold
	}
	return 0
}

func (m *ManageEventResponse) GetQuantity() int32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *ManageEventResponse) GetVenueName() string {
	if m != nil {
		return m.VenueName
	}
	return ""
}

func (m *ManageEventResponse) GetVenueCity() string {
	if m != nil {
		return m.VenueCity
	}
	return ""
}

func (m *ManageEventResponse) GetCoverImageUploadId() string {
	if m != nil {
		return m.CoverImageUploadId
	}
	return ""
}

func (m *ManageEventResponse) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *ManageEventResponse) GetAllowVisitorRegistrations() string {
	if m != nil {
		return m.AllowVisitorRegistrations
	}
	return ""
}

func (m *ManageEventResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ManageEventResponse) GetVisitors() int32 {
	if m != nil {
		return m.Visitors
	}
	return 0
}

func (m *ManageEventResponse) GetTicketStartTime() string {
	if m != nil {
		return m.TicketStartTime
	}
	return ""
}

func (m *ManageEventResponse) GetTicketStartDate() string {
	if m != nil {
		return m.TicketStartDate
	}
	return ""
}

func (m *ManageEventResponse) GetTicketEndTime() string {
	if m != nil {
		return m.TicketEndTime
	}
	return ""
}

func (m *ManageEventResponse) GetTicketEndDate() string {
	if m != nil {
		return m.TicketEndDate
	}
	return ""
}

func (m *ManageEventResponse) GetTimeZone() string {
	if m != nil {
		return m.TimeZone
	}
	return ""
}

func (m *ManageEventResponse) GetEventStatus() string {
	if m != nil {
		return m.EventStatus
	}
	return ""
}

func (m *ManageEventResponse) GetPageViews() int64 {
	if m != nil {
		return m.PageViews
	}
	return 0
}

func (m *ManageEventResponse) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *ManageEventResponse) GetEndDate() string {
	if m != nil {
		return m.EndDate
	}
	return ""
}

func (m *ManageEventResponse) GetDeactivated() bool {
	if m != nil {
		return m.Deactivated
	}
	return false
}

type EventRequest struct {
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	UserId  string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *EventRequest) Reset()                    { *m = EventRequest{} }
func (m *EventRequest) String() string            { return proto.CompactTextString(m) }
func (*EventRequest) ProtoMessage()               {}
func (*EventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *EventRequest) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *EventRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type UpdateRequest struct {
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	Event   *Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *UpdateRequest) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *UpdateRequest) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type UpdateResponse struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *UpdateResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type AnyResponse struct {
	Status  string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *AnyResponse) Reset()                    { *m = AnyResponse{} }
func (m *AnyResponse) String() string            { return proto.CompactTextString(m) }
func (*AnyResponse) ProtoMessage()               {}
func (*AnyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *AnyResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *AnyResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UpdateFeaturedRequest struct {
	EventId  string `protobuf:"bytes,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	Featured string `protobuf:"bytes,2,opt,name=featured" json:"featured,omitempty"`
}

func (m *UpdateFeaturedRequest) Reset()                    { *m = UpdateFeaturedRequest{} }
func (m *UpdateFeaturedRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateFeaturedRequest) ProtoMessage()               {}
func (*UpdateFeaturedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *UpdateFeaturedRequest) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *UpdateFeaturedRequest) GetFeatured() string {
	if m != nil {
		return m.Featured
	}
	return ""
}

func init() {
	proto.RegisterType((*EventDetail)(nil), "event.EventDetail")
	proto.RegisterType((*Organizer)(nil), "event.Organizer")
	proto.RegisterType((*Tax)(nil), "event.Tax")
	proto.RegisterType((*Ticket)(nil), "event.Ticket")
	proto.RegisterType((*Schedule)(nil), "event.Schedule")
	proto.RegisterType((*Speaker)(nil), "event.Speaker")
	proto.RegisterType((*Exhibitor)(nil), "event.Exhibitor")
	proto.RegisterType((*Sponsor)(nil), "event.Sponsor")
	proto.RegisterType((*Partner)(nil), "event.Partner")
	proto.RegisterType((*MobileApp)(nil), "event.MobileApp")
	proto.RegisterType((*Event)(nil), "event.Event")
	proto.RegisterType((*Coordinates)(nil), "event.Coordinates")
	proto.RegisterType((*Response)(nil), "event.Response")
	proto.RegisterType((*RollbackRequest)(nil), "event.RollbackRequest")
	proto.RegisterType((*RollbackReponse)(nil), "event.RollbackReponse")
	proto.RegisterType((*EventItem)(nil), "event.EventItem")
	proto.RegisterType((*ManageEventResponse)(nil), "event.ManageEventResponse")
	proto.RegisterType((*EventRequest)(nil), "event.EventRequest")
	proto.RegisterType((*UpdateRequest)(nil), "event.UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "event.UpdateResponse")
	proto.RegisterType((*AnyResponse)(nil), "event.AnyResponse")
	proto.RegisterType((*UpdateFeaturedRequest)(nil), "event.UpdateFeaturedRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventService service

type EventServiceClient interface {
	CreateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Response, error)
	Rollback(ctx context.Context, in *RollbackRequest, opts ...grpc.CallOption) (*RollbackReponse, error)
	GetEventsByUserId(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (EventService_GetEventsByUserIdClient, error)
	GetEventById(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*Event, error)
	UpdateEventById(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	ManageEventById(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*ManageEventResponse, error)
	UpdateFeaturedEventById(ctx context.Context, in *UpdateFeaturedRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
}

type eventServiceClient struct {
	cc *grpc.ClientConn
}

func NewEventServiceClient(cc *grpc.ClientConn) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) CreateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/event.EventService/CreateEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) Rollback(ctx context.Context, in *RollbackRequest, opts ...grpc.CallOption) (*RollbackReponse, error) {
	out := new(RollbackReponse)
	err := grpc.Invoke(ctx, "/event.EventService/Rollback", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetEventsByUserId(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (EventService_GetEventsByUserIdClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EventService_serviceDesc.Streams[0], c.cc, "/event.EventService/GetEventsByUserId", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceGetEventsByUserIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventService_GetEventsByUserIdClient interface {
	Recv() (*EventItem, error)
	grpc.ClientStream
}

type eventServiceGetEventsByUserIdClient struct {
	grpc.ClientStream
}

func (x *eventServiceGetEventsByUserIdClient) Recv() (*EventItem, error) {
	m := new(EventItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventServiceClient) GetEventById(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := grpc.Invoke(ctx, "/event.EventService/GetEventById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) UpdateEventById(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := grpc.Invoke(ctx, "/event.EventService/UpdateEventById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) ManageEventById(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*ManageEventResponse, error) {
	out := new(ManageEventResponse)
	err := grpc.Invoke(ctx, "/event.EventService/ManageEventById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) UpdateFeaturedEventById(ctx context.Context, in *UpdateFeaturedRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := grpc.Invoke(ctx, "/event.EventService/UpdateFeaturedEventById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EventService service

type EventServiceServer interface {
	CreateEvent(context.Context, *Event) (*Response, error)
	Rollback(context.Context, *RollbackRequest) (*RollbackReponse, error)
	GetEventsByUserId(*EventRequest, EventService_GetEventsByUserIdServer) error
	GetEventById(context.Context, *EventRequest) (*Event, error)
	UpdateEventById(context.Context, *UpdateRequest) (*UpdateResponse, error)
	ManageEventById(context.Context, *EventRequest) (*ManageEventResponse, error)
	UpdateFeaturedEventById(context.Context, *UpdateFeaturedRequest) (*UpdateResponse, error)
}

func RegisterEventServiceServer(s *grpc.Server, srv EventServiceServer) {
	s.RegisterService(&_EventService_serviceDesc, srv)
}

func _EventService_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventService/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).CreateEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_Rollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).Rollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventService/Rollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).Rollback(ctx, req.(*RollbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetEventsByUserId_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).GetEventsByUserId(m, &eventServiceGetEventsByUserIdServer{stream})
}

type EventService_GetEventsByUserIdServer interface {
	Send(*EventItem) error
	grpc.ServerStream
}

type eventServiceGetEventsByUserIdServer struct {
	grpc.ServerStream
}

func (x *eventServiceGetEventsByUserIdServer) Send(m *EventItem) error {
	return x.ServerStream.SendMsg(m)
}

func _EventService_GetEventById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetEventById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventService/GetEventById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetEventById(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_UpdateEventById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).UpdateEventById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventService/UpdateEventById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).UpdateEventById(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_ManageEventById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).ManageEventById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventService/ManageEventById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).ManageEventById(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_UpdateFeaturedEventById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeaturedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).UpdateFeaturedEventById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventService/UpdateFeaturedEventById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).UpdateFeaturedEventById(ctx, req.(*UpdateFeaturedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "event.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvent",
			Handler:    _EventService_CreateEvent_Handler,
		},
		{
			MethodName: "Rollback",
			Handler:    _EventService_Rollback_Handler,
		},
		{
			MethodName: "GetEventById",
			Handler:    _EventService_GetEventById_Handler,
		},
		{
			MethodName: "UpdateEventById",
			Handler:    _EventService_UpdateEventById_Handler,
		},
		{
			MethodName: "ManageEventById",
			Handler:    _EventService_ManageEventById_Handler,
		},
		{
			MethodName: "UpdateFeaturedEventById",
			Handler:    _EventService_UpdateFeaturedEventById_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEventsByUserId",
			Handler:       _EventService_GetEventsByUserId_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "event.proto",
}

func init() { proto.RegisterFile("event.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2161 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x59, 0xef, 0x4e, 0x23, 0xc9,
	0x11, 0x97, 0x31, 0xb6, 0xc7, 0x65, 0x1b, 0x43, 0x2f, 0x2c, 0xb3, 0xb0, 0x7b, 0xb0, 0xbe, 0xbd,
	0x84, 0xfb, 0xa3, 0xcd, 0x41, 0x4e, 0x51, 0x14, 0x25, 0x17, 0x2d, 0x0b, 0x89, 0xac, 0xe8, 0xb8,
	0xd3, 0xc0, 0x6e, 0xa4, 0x28, 0xd2, 0xa8, 0xed, 0xe9, 0x85, 0x16, 0xe3, 0x19, 0xef, 0x74, 0x1b,
	0xf0, 0x7d, 0xca, 0x0b, 0xe4, 0x1d, 0xf2, 0x08, 0x79, 0x80, 0xdc, 0xe7, 0xe4, 0xc3, 0x3d, 0x50,
	0x3e, 0x46, 0x5d, 0xdd, 0xd3, 0xd3, 0x33, 0x60, 0xd8, 0x53, 0xbe, 0xb9, 0x7e, 0x55, 0x5d, 0x5d,
	0x5d, 0xff, 0xba, 0x7a, 0x0c, 0x1d, 0x76, 0xc5, 0x12, 0xf9, 0x72, 0x9a, 0xa5, 0x32, 0x25, 0x0d,
	0x24, 0x06, 0xff, 0x6e, 0x43, 0xe7, 0x58, 0xfd, 0x3a, 0x62, 0x92, 0xf2, 0x98, 0xac, 0xc0, 0x12,
	0x8f, 0xfc, 0xda, 0x6e, 0x6d, 0xaf, 0x1d, 0x2c, 0xf1, 0x88, 0x10, 0x58, 0x4e, 0xe8, 0x84, 0xf9,
	0x4b, 0x88, 0xe0, 0x6f, 0xf2, 0x39, 0xac, 0x8d, 0x32, 0xce, 0xde, 0x85, 0x11, 0x13, 0xe3, 0x8c,
	0x4f, 0x25, 0x4f, 0x13, 0xbf, 0x8e, 0x02, 0xab, 0xc8, 0x38, 0x2a, 0x70, 0xf2, 0x0c, 0x40, 0x48,
	0x9a, 0xc9, 0x30, 0xa2, 0x92, 0xf9, 0xcb, 0x28, 0xd5, 0x46, 0xe4, 0x88, 0x4a, 0x56, 0xb0, 0x25,
	0x9f, 0x30, 0xbf, 0xe1, 0xb0, 0xcf, 0xf8, 0x84, 0x91, 0x27, 0xe0, 0xb1, 0x24, 0xd2, 0x6b, 0x9b,
	0xc8, 0x6c, 0xb1, 0x24, 0xc2, 0x95, 0x86, 0x85, 0xeb, 0x5a, 0x96, 0x85, 0xab, 0x9e, 0x01, 0x5c,
	0xb1, 0x64, 0xc6, 0x42, 0x34, 0xdd, 0xd3, 0x4a, 0x11, 0x39, 0x51, 0xf6, 0xfb, 0xd0, 0xa2, 0x51,
	0x94, 0x31, 0x21, 0xfc, 0xb6, 0x5e, 0x68, 0x48, 0xb2, 0x0d, 0x6d, 0xf3, 0x33, 0x3c, 0xf0, 0x01,
	0x79, 0x9e, 0x01, 0x0e, 0x0a, 0xad, 0x63, 0x2e, 0xe7, 0x7e, 0xc7, 0xd1, 0xfa, 0x9a, 0xcb, 0x39,
	0xf9, 0x18, 0x7a, 0x86, 0x9d, 0xce, 0x12, 0x99, 0xcd, 0xfd, 0x2e, 0x4a, 0x74, 0xb5, 0x84, 0xc6,
	0xc8, 0x0e, 0x74, 0xb4, 0x90, 0x90, 0xea, 0x48, 0x3d, 0x14, 0xd1, 0x6a, 0x4f, 0x15, 0x42, 0xf6,
	0x61, 0x63, 0x9c, 0x5e, 0xb1, 0x2c, 0xe4, 0x13, 0x7a, 0xce, 0xc2, 0xd9, 0x34, 0x4e, 0x69, 0x14,
	0xf2, 0xc8, 0xef, 0xa3, 0x28, 0x41, 0xe6, 0x50, 0xf1, 0xde, 0x20, 0x6b, 0x18, 0x91, 0x75, 0x68,
	0x48, 0x2e, 0x63, 0xe6, 0xaf, 0xa2, 0x88, 0x26, 0xc8, 0x3e, 0xac, 0x47, 0x18, 0x52, 0x16, 0x95,
	0xe2, 0xb4, 0x86, 0x42, 0x8f, 0x72, 0x5e, 0x25, 0x54, 0x98, 0x14, 0xa1, 0xa4, 0xe7, 0xc2, 0x7f,
	0xa4, 0x0f, 0x88, 0xc8, 0x19, 0x3d, 0x17, 0xca, 0xe1, 0x93, 0xb9, 0x78, 0x1f, 0x2b, 0x6b, 0xd6,
	0xb5, 0xdf, 0x90, 0x1e, 0x46, 0x64, 0x13, 0x5a, 0x33, 0xa1, 0x8c, 0x8e, 0xfc, 0x0d, 0xe4, 0x34,
	0x15, 0x39, 0x8c, 0xc8, 0xcf, 0xa1, 0x5f, 0x84, 0x57, 0x48, 0x3a, 0x99, 0xfa, 0x8f, 0x51, 0x60,
	0xc5, 0xc6, 0x18, 0x51, 0xe5, 0xbd, 0x3c, 0x9a, 0x5a, 0x6c, 0x53, 0x7b, 0xcf, 0x84, 0x54, 0x0b,
	0x6d, 0x81, 0xa7, 0x04, 0xbe, 0x4f, 0x13, 0xe6, 0xfb, 0x3a, 0x3a, 0x39, 0xad, 0x12, 0x15, 0xf1,
	0x27, 0x3a, 0x51, 0x11, 0xdb, 0x81, 0x0e, 0x17, 0xe1, 0x3b, 0x46, 0xe5, 0x2c, 0x63, 0x91, 0xbf,
	0xb5, 0x5b, 0xdb, 0xf3, 0x02, 0xe0, 0xe2, 0x0f, 0x06, 0x51, 0x27, 0x1e, 0x67, 0x8c, 0x4a, 0x16,
	0x85, 0x69, 0xe2, 0x6f, 0xeb, 0x13, 0x1b, 0xe4, 0xdb, 0x44, 0xed, 0x77, 0xc9, 0xe6, 0xd7, 0x69,
	0x16, 0x09, 0xff, 0xe9, 0x6e, 0x5d, 0xed, 0x97, 0xd3, 0xe4, 0x2b, 0x78, 0x4c, 0xe3, 0x38, 0xbd,
	0x0e, 0xc5, 0x34, 0x4d, 0x44, 0x9a, 0x85, 0x2c, 0x79, 0x3f, 0xe3, 0x19, 0x13, 0xfe, 0x33, 0x54,
	0xb3, 0x8e, 0xdc, 0x53, 0xcd, 0x3c, 0x36, 0x3c, 0xf2, 0x6b, 0xf0, 0xf5, 0x2a, 0x76, 0x73, 0xc1,
	0x47, 0x5c, 0xba, 0xeb, 0x3e, 0xc2, 0x75, 0x5a, 0xeb, 0x71, 0xce, 0xb6, 0x2b, 0x7f, 0x05, 0x9b,
	0x7a, 0xe5, 0x28, 0x4b, 0xc7, 0x17, 0xb3, 0x8c, 0x15, 0x0b, 0x77, 0x70, 0xe1, 0x06, 0xb2, 0x0f,
	0x0d, 0xd7, 0xae, 0x3b, 0x82, 0x1d, 0x37, 0xa1, 0xe4, 0xc5, 0x6c, 0x32, 0x4a, 0x28, 0x8f, 0x9d,
	0xd4, 0xda, 0xc5, 0xf5, 0xdb, 0x45, 0x6a, 0x9d, 0xe5, 0x42, 0x36, 0xc7, 0x7e, 0x01, 0xeb, 0xef,
	0xe2, 0x34, 0xcd, 0xc2, 0x69, 0x4c, 0x13, 0x67, 0xe9, 0x73, 0x5c, 0xba, 0x86, 0xbc, 0xef, 0x62,
	0x9a, 0xd8, 0x05, 0x3b, 0xa6, 0xdb, 0x84, 0x57, 0x3c, 0x62, 0xa9, 0x3f, 0xd0, 0x89, 0x8e, 0xd0,
	0x5b, 0x85, 0x90, 0xe7, 0xa0, 0x2b, 0x23, 0xcc, 0xd8, 0xb9, 0xca, 0xcb, 0x8f, 0x51, 0x42, 0x57,
	0x47, 0x80, 0x10, 0xf9, 0x02, 0x08, 0x93, 0xe1, 0x38, 0x9d, 0x4c, 0xb8, 0x10, 0x3c, 0x4d, 0xc2,
	0x4c, 0xd5, 0xcc, 0x8b, 0xdd, 0xda, 0x5e, 0x2d, 0x58, 0x65, 0xf2, 0xb5, 0x65, 0x04, 0x54, 0xb2,
	0xc1, 0x3f, 0x6a, 0xd0, 0xfe, 0x36, 0x3b, 0xa7, 0x09, 0xff, 0x9e, 0x65, 0xb6, 0x6f, 0xd5, 0x9c,
	0xbe, 0xb5, 0x0b, 0x1d, 0xb7, 0x12, 0x74, 0x4b, 0x73, 0x21, 0xd5, 0x19, 0xae, 0xd9, 0x48, 0x70,
	0xc9, 0x4c, 0x3f, 0xcb, 0x49, 0xd3, 0x17, 0x97, 0x6d, 0x5f, 0x7c, 0x0c, 0x4d, 0x55, 0xc2, 0x33,
	0x61, 0x7a, 0x96, 0xa1, 0x54, 0x07, 0x29, 0xbc, 0xa3, 0x3b, 0x96, 0x37, 0x33, 0x4e, 0x19, 0xfc,
	0xab, 0x06, 0xf5, 0x33, 0x7a, 0xa3, 0x2a, 0x49, 0xd2, 0x9b, 0xd0, 0x31, 0xb0, 0x25, 0xe9, 0x0d,
	0xf6, 0x26, 0xc3, 0xc2, 0x93, 0x2e, 0x59, 0x96, 0x3a, 0x20, 0xd9, 0x80, 0xa6, 0x62, 0xf1, 0xc8,
	0xd8, 0xd6, 0x90, 0xf4, 0x66, 0x18, 0x29, 0x47, 0x9a, 0x8e, 0xa3, 0x15, 0x6a, 0x1b, 0x3b, 0x06,
	0x43, 0xa5, 0x2f, 0x60, 0x45, 0x5c, 0xa4, 0xb3, 0x38, 0x0a, 0x69, 0x14, 0x85, 0x92, 0xde, 0x18,
	0xa3, 0xbb, 0x1a, 0x7d, 0x15, 0x45, 0xca, 0x2a, 0x55, 0x2d, 0xc9, 0x38, 0x9e, 0x45, 0x0c, 0x45,
	0x9a, 0xa6, 0x5a, 0x34, 0x74, 0x46, 0x6f, 0x06, 0xff, 0xac, 0x43, 0xf3, 0x8c, 0x8f, 0x2f, 0x99,
	0xbc, 0xd3, 0xbd, 0x5b, 0xe0, 0xbd, 0x9f, 0xd1, 0x44, 0xaa, 0xee, 0xa8, 0x4c, 0x6f, 0x04, 0x96,
	0x56, 0x3d, 0x6a, 0x9a, 0xf1, 0xb1, 0x76, 0x6b, 0x2d, 0xd0, 0x84, 0x5a, 0x31, 0x9e, 0x65, 0x19,
	0x4b, 0xc6, 0x73, 0x63, 0xb6, 0xa5, 0x2b, 0xf7, 0x46, 0xe3, 0xfe, 0x7b, 0xa3, 0x79, 0xdf, 0xbd,
	0xd1, 0x5a, 0x7c, 0x6f, 0x78, 0xe5, 0x7b, 0xe3, 0x6b, 0xd8, 0xd6, 0x35, 0x76, 0xc5, 0x05, 0xd6,
	0xa6, 0xca, 0x4d, 0x21, 0x33, 0xaa, 0x92, 0x23, 0xbf, 0x2c, 0x9e, 0xa0, 0xc8, 0x5b, 0x2d, 0x11,
	0xb8, 0x02, 0xca, 0x2b, 0x22, 0x8d, 0x23, 0xbc, 0x39, 0x1a, 0x01, 0xfe, 0xbe, 0xab, 0x03, 0x76,
	0x3e, 0xac, 0x03, 0x76, 0x1f, 0xe8, 0x80, 0xbd, 0x05, 0x1d, 0x70, 0xa5, 0xe8, 0x80, 0x83, 0x1f,
	0x6b, 0xe0, 0x9d, 0x8e, 0x2f, 0x58, 0x34, 0x8b, 0xd9, 0xad, 0xbb, 0xdd, 0x5e, 0x1c, 0x4b, 0xee,
	0xc5, 0x51, 0xa9, 0x92, 0xfa, 0xed, 0x2a, 0x19, 0x40, 0x17, 0x6d, 0x3f, 0xd6, 0x1e, 0x35, 0xa1,
	0x2b, 0x61, 0xaa, 0x92, 0xc4, 0x94, 0xd1, 0x4b, 0x96, 0x99, 0xd8, 0xe5, 0xa4, 0xda, 0x15, 0x8b,
	0xdc, 0x04, 0x4d, 0x13, 0xe4, 0x05, 0xf4, 0x84, 0xb1, 0xf3, 0x0c, 0x6d, 0xd2, 0x51, 0x2b, 0x83,
	0x83, 0xff, 0xd4, 0xa0, 0x75, 0x6a, 0xf4, 0x54, 0x4f, 0xf3, 0x14, 0xda, 0xef, 0x78, 0x26, 0xe4,
	0x49, 0x31, 0xae, 0x14, 0x80, 0x72, 0x5c, 0x4c, 0x0d, 0x53, 0x1f, 0xc9, 0xd2, 0x8a, 0x37, 0x4d,
	0x05, 0xc7, 0xe3, 0x9a, 0x34, 0xcc, 0x69, 0x75, 0x8e, 0x71, 0x3a, 0x99, 0xd2, 0x64, 0x9e, 0x9f,
	0xc3, 0x90, 0x55, 0x3f, 0x35, 0x6f, 0xfb, 0xa9, 0xd4, 0x0b, 0x5a, 0x95, 0x5e, 0xf0, 0x63, 0x0d,
	0xda, 0xb6, 0xcb, 0xdf, 0x3a, 0x8c, 0xb3, 0xed, 0xd2, 0xad, 0x6d, 0x47, 0x69, 0x2a, 0x2f, 0x4e,
	0x66, 0x93, 0x11, 0xcb, 0xf2, 0xf0, 0x38, 0x90, 0xdb, 0xc4, 0x96, 0xcb, 0x4d, 0x4c, 0xd5, 0x1b,
	0x95, 0xec, 0x3c, 0xcd, 0xf2, 0xd3, 0x58, 0xfa, 0xff, 0x3d, 0xce, 0xdf, 0x30, 0x32, 0x78, 0xd9,
	0xfd, 0x84, 0xc3, 0x2c, 0xee, 0xb7, 0xeb, 0xd0, 0x60, 0x13, 0xca, 0x63, 0x73, 0x04, 0x4d, 0x94,
	0x4d, 0x68, 0xdc, 0x61, 0xc2, 0x77, 0x34, 0x93, 0x09, 0xfb, 0x29, 0x26, 0xd8, 0x8d, 0xea, 0xee,
	0x46, 0x8b, 0x7d, 0x78, 0x6f, 0x83, 0xff, 0x1d, 0xb4, 0xbf, 0x49, 0x47, 0x3c, 0x66, 0xaf, 0xa6,
	0x53, 0x95, 0x90, 0x74, 0xc2, 0x12, 0x2e, 0x39, 0x13, 0xc6, 0x94, 0x02, 0x50, 0xd5, 0x7a, 0xc1,
	0xe2, 0x69, 0x3e, 0x58, 0xab, 0xdf, 0x83, 0xff, 0x36, 0xa0, 0x81, 0xc3, 0x38, 0xf9, 0xca, 0x5c,
	0x9f, 0x7a, 0x2a, 0xc7, 0xd5, 0x9d, 0x03, 0xf2, 0x52, 0x0f, 0xf0, 0xce, 0xbc, 0x1e, 0xb8, 0x62,
	0xe4, 0x25, 0xb4, 0xd3, 0xfc, 0x06, 0x44, 0xc5, 0x9d, 0x83, 0x55, 0xb3, 0xc6, 0xde, 0x8c, 0x41,
	0x21, 0x42, 0x9e, 0x42, 0x5d, 0x75, 0xfa, 0x3a, 0x4a, 0x82, 0x91, 0x3c, 0xa3, 0x37, 0x81, 0x82,
	0xc9, 0x27, 0xd0, 0x94, 0xd8, 0xed, 0xd1, 0x05, 0x9d, 0x83, 0x5e, 0x2e, 0x80, 0x60, 0x60, 0x98,
	0xe4, 0x33, 0xf0, 0x4c, 0x69, 0xab, 0xbb, 0xb0, 0xbe, 0xd7, 0x39, 0x58, 0x31, 0x82, 0xa6, 0x52,
	0x03, 0xcb, 0x27, 0x5f, 0x02, 0xd8, 0xc1, 0x47, 0xf8, 0x4d, 0x94, 0xce, 0x2d, 0xb4, 0xc5, 0x10,
	0x38, 0x32, 0x5a, 0x3b, 0xa6, 0x95, 0xf0, 0x5b, 0x15, 0xed, 0x08, 0x07, 0x96, 0xaf, 0x64, 0xa7,
	0x3a, 0xfe, 0xc2, 0xf7, 0x4a, 0xb2, 0x26, 0x2d, 0x02, 0xcb, 0x27, 0x9f, 0x83, 0x97, 0xb7, 0x16,
	0xbf, 0x8d, 0xb2, 0xfd, 0x5c, 0xaf, 0x81, 0x03, 0x2b, 0x40, 0x3e, 0x02, 0x30, 0x75, 0xa2, 0x42,
	0x09, 0x38, 0x09, 0x3a, 0x88, 0x8a, 0x34, 0x4f, 0x24, 0xcb, 0x98, 0x90, 0xc2, 0xef, 0x20, 0xbb,
	0x00, 0x30, 0x0f, 0xa4, 0x64, 0x49, 0xc4, 0x98, 0xf0, 0xbb, 0x9a, 0x6b, 0x01, 0xa5, 0x5b, 0x8f,
	0xd8, 0xf3, 0x29, 0x13, 0x7e, 0x4f, 0xeb, 0x2e, 0x10, 0x67, 0xd0, 0x58, 0x29, 0x0d, 0x1a, 0x2f,
	0x60, 0x85, 0x8b, 0x90, 0x27, 0xe1, 0x35, 0x17, 0x17, 0x31, 0x17, 0xd2, 0xbc, 0x10, 0xba, 0x5c,
	0x0c, 0x93, 0x3f, 0x1b, 0x4c, 0xe5, 0xd1, 0x38, 0x4d, 0xb3, 0x88, 0x27, 0x54, 0x32, 0x81, 0x2f,
	0x84, 0x22, 0x8f, 0x5e, 0x17, 0x9c, 0xc0, 0x15, 0x53, 0x79, 0x34, 0xc9, 0xd3, 0x18, 0x1f, 0x0c,
	0x45, 0x94, 0x6c, 0x7a, 0x07, 0x85, 0x48, 0x75, 0xce, 0x26, 0x7a, 0xd8, 0x73, 0xe6, 0x6c, 0x6c,
	0x2e, 0x74, 0x2c, 0xf9, 0x95, 0x9a, 0xac, 0xf1, 0x69, 0xe1, 0x05, 0x2e, 0x34, 0xd8, 0x87, 0x8e,
	0x63, 0x0e, 0x59, 0x85, 0x7a, 0x4c, 0x25, 0xe6, 0x7d, 0x2d, 0x50, 0x3f, 0x11, 0x31, 0x43, 0x9b,
	0x42, 0xd2, 0x64, 0xf0, 0x57, 0xf0, 0x02, 0x86, 0xc1, 0x67, 0x8e, 0x97, 0x6a, 0x25, 0x2f, 0x6d,
	0x81, 0x47, 0x33, 0x9a, 0x9c, 0xa7, 0xc3, 0x23, 0x53, 0x69, 0x96, 0x56, 0x71, 0x61, 0xea, 0x0e,
	0xe0, 0xe3, 0x61, 0x3e, 0x52, 0x15, 0xc0, 0xe0, 0x4f, 0xd0, 0x0f, 0xd2, 0x38, 0x1e, 0xd1, 0xf1,
	0x65, 0xc0, 0xde, 0xcf, 0x98, 0x90, 0x8e, 0xb2, 0xbc, 0xb5, 0x58, 0xba, 0xac, 0x6c, 0xa9, 0xaa,
	0xec, 0x53, 0x57, 0xd9, 0xbd, 0x16, 0x0f, 0x7e, 0x68, 0x40, 0x1b, 0x0b, 0x7c, 0x28, 0xd9, 0xe4,
	0x83, 0x9e, 0xe3, 0xe5, 0x49, 0xa9, 0x7e, 0xff, 0xa4, 0xb4, 0x7c, 0xdf, 0xa4, 0xd4, 0x28, 0x4f,
	0x4a, 0xe5, 0x67, 0x74, 0xb3, 0xfa, 0x8c, 0x2e, 0xbf, 0x87, 0x5b, 0x0f, 0xbe, 0x87, 0xbd, 0x3b,
	0xde, 0xc3, 0xee, 0x04, 0xd8, 0xae, 0x4c, 0x80, 0x76, 0x66, 0x04, 0x77, 0x66, 0xdc, 0x87, 0xf5,
	0xbb, 0xa6, 0x33, 0x33, 0x54, 0x3d, 0xba, 0xba, 0x3d, 0x97, 0x2d, 0x7e, 0x53, 0x77, 0x17, 0xbe,
	0xa9, 0x8b, 0xe8, 0xf4, 0x4a, 0xf9, 0x74, 0xc7, 0x8c, 0x55, 0x9a, 0xc9, 0xfa, 0x95, 0x99, 0xcc,
	0x1d, 0x36, 0x57, 0xcb, 0xc3, 0xa6, 0x0f, 0x2d, 0xdd, 0x41, 0x05, 0x96, 0x58, 0x23, 0xc8, 0x49,
	0x3b, 0x46, 0x12, 0x67, 0x8c, 0x5c, 0x85, 0xfa, 0x25, 0x9b, 0x9b, 0x47, 0xb9, 0xfa, 0xa9, 0xe6,
	0x7e, 0xdb, 0xc9, 0x8b, 0x27, 0x79, 0xc7, 0x62, 0xc3, 0x88, 0x7c, 0x02, 0x2b, 0x85, 0x08, 0x06,
	0x51, 0xbf, 0xce, 0x7b, 0x16, 0xc5, 0x40, 0x7e, 0x0a, 0xab, 0x85, 0x98, 0x39, 0xb6, 0x7e, 0xa5,
	0xf7, 0x2d, 0x7e, 0xaa, 0xcf, 0x5f, 0x29, 0xe4, 0xcd, 0xdb, 0x85, 0xfc, 0xf7, 0x26, 0x3c, 0xfa,
	0x86, 0x26, 0xf4, 0x9c, 0x61, 0x16, 0xdb, 0x0a, 0xbd, 0xeb, 0xc5, 0x50, 0xce, 0xdc, 0xa5, 0xfb,
	0x33, 0xb7, 0x5e, 0xcd, 0x5c, 0x9b, 0x1f, 0xcb, 0x6e, 0x7e, 0xe4, 0xce, 0x6b, 0x38, 0xce, 0x73,
	0x5f, 0x26, 0xcd, 0xca, 0xcb, 0xa4, 0x9c, 0xe4, 0xad, 0xfb, 0x93, 0xdc, 0xab, 0x26, 0xf9, 0xc2,
	0xd4, 0x6a, 0x2f, 0x4c, 0x2d, 0x37, 0xe5, 0xa1, 0x92, 0xf2, 0x0f, 0x3c, 0x40, 0x3a, 0x0f, 0x3d,
	0x40, 0x8a, 0xb4, 0xed, 0x56, 0xdb, 0xa0, 0xd1, 0xa8, 0x13, 0xba, 0x11, 0x58, 0x9a, 0x7c, 0x06,
	0x6b, 0x3a, 0xf1, 0x42, 0xc7, 0xd9, 0x3a, 0xbf, 0xfb, 0x9a, 0x71, 0x6a, 0x5d, 0x5e, 0x95, 0xc5,
	0xb8, 0xf5, 0x6f, 0xc9, 0x62, 0xf4, 0x7e, 0x06, 0x06, 0x0a, 0x2b, 0x15, 0xd0, 0xd3, 0xf0, 0xb1,
	0xa9, 0x83, 0xb2, 0x1c, 0x6a, 0x5c, 0xab, 0xc8, 0xa1, 0xbe, 0x6d, 0x68, 0x2b, 0x25, 0x21, 0xd6,
	0x19, 0x29, 0xea, 0xec, 0x2f, 0xaa, 0xce, 0x9e, 0x43, 0x57, 0x7f, 0x6e, 0x30, 0xc7, 0xd7, 0x75,
	0xa2, 0x87, 0x23, 0x93, 0xba, 0xcf, 0x00, 0xa6, 0x2a, 0x46, 0x57, 0x9c, 0x5d, 0x0b, 0xac, 0x96,
	0x7a, 0xd0, 0x56, 0xc8, 0x5b, 0x05, 0x94, 0x2a, 0x75, 0xa3, 0x5c, 0xa9, 0x6e, 0x8b, 0x7c, 0x5c,
	0x6e, 0x91, 0x0f, 0xd7, 0xc3, 0x21, 0x74, 0x4d, 0x21, 0xe8, 0x4b, 0x44, 0x29, 0x43, 0x4b, 0x6d,
	0x5f, 0x6f, 0x21, 0x5d, 0xfe, 0x8a, 0xb6, 0xe4, 0x7e, 0x45, 0x1b, 0x9c, 0x40, 0xef, 0xcd, 0x54,
	0x6d, 0xff, 0x01, 0x4a, 0x06, 0xa0, 0xbf, 0xec, 0x9a, 0xf9, 0xaf, 0xeb, 0xce, 0x8c, 0x81, 0xf9,
	0xe8, 0xbb, 0x07, 0x2b, 0xb9, 0xbe, 0xfb, 0xef, 0xcf, 0xc1, 0xef, 0xa1, 0xf3, 0x2a, 0x99, 0x3f,
	0x78, 0xcd, 0xfa, 0xd0, 0x9a, 0x30, 0x21, 0xe8, 0xb9, 0xfd, 0x68, 0x61, 0xc8, 0xc1, 0x09, 0x6c,
	0xe8, 0xad, 0xf2, 0x59, 0xe0, 0x03, 0x8e, 0xb0, 0x05, 0x9e, 0x9d, 0x25, 0xcc, 0xa5, 0x9d, 0xd3,
	0x07, 0x3f, 0xd4, 0x8d, 0x3f, 0x4f, 0x59, 0x76, 0xa5, 0xea, 0xfd, 0x0b, 0xe8, 0xbc, 0xc6, 0x0f,
	0x76, 0x7a, 0x70, 0x2e, 0x9d, 0x77, 0x2b, 0x9f, 0xe9, 0xec, 0x01, 0x7e, 0x03, 0x5e, 0x7e, 0x11,
	0x93, 0xc7, 0x39, 0xb3, 0x7c, 0xcd, 0x6f, 0xdd, 0xc6, 0xf5, 0xda, 0xdf, 0xc2, 0xda, 0x1f, 0x99,
	0x44, 0xc5, 0xe2, 0x70, 0xfe, 0x46, 0x7f, 0xe0, 0x7c, 0x54, 0xf2, 0xaf, 0xd1, 0xb0, 0xea, 0x82,
	0xea, 0x1e, 0xff, 0xb2, 0x46, 0xf6, 0xa1, 0x9b, 0xaf, 0x3e, 0x9c, 0x2f, 0x5a, 0x58, 0xb2, 0x9e,
	0x7c, 0x0d, 0x7d, 0xed, 0xbb, 0x62, 0xd5, 0xba, 0x11, 0x28, 0xa5, 0xc3, 0xd6, 0x46, 0x05, 0x35,
	0x87, 0x3d, 0x84, 0xbe, 0xd3, 0x89, 0x17, 0xef, 0xba, 0x95, 0xcf, 0x76, 0x77, 0xb4, 0xed, 0x13,
	0xd8, 0x2c, 0xc7, 0xaf, 0xd0, 0xf5, 0xb4, 0xb4, 0x6b, 0x25, 0xbe, 0x0b, 0x6c, 0x1a, 0x35, 0xf1,
	0xdf, 0x87, 0x5f, 0xfe, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x7b, 0x88, 0x92, 0x3b, 0x8c, 0x18, 0x00,
	0x00,
}
